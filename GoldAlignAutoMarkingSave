/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.disnodeteam.dogecv.CameraViewDisplay;
import com.disnodeteam.dogecv.DogeCV;
import com.disnodeteam.dogecv.detectors.roverrukus.GoldAlignDetector;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.util.ElapsedTime;


@TeleOp(name="GoldAlignAutoMarking", group="DogeCV")

public class GoldAlignAuto100Marking1353 extends OpMode {
    // Detector object
    private GoldAlignDetector detector;
    private DcMotor left_drive = null;
    private DcMotor right_drive = null;
    private DcMotor intake_drive = null;
    private ElapsedTime runtime = new ElapsedTime();
    private TouchSensor top = null;
    private DcMotor linear_drive = null;
    private DigitalChannel liftSense = null;
    double turn = 0.4;
    double forward = 0.5;
    double goldPosition = 2;
    boolean sampled = false;
    boolean letsGO = true;
    boolean detected = false;
    boolean landed = false;
    boolean backUptime = false;
    boolean backUpdone = false;
    boolean turnTime = false;
    boolean turnDone = false;
    boolean DONE = false;
    boolean turnTime1 = false;
    boolean turnDone2 = false;
    boolean markingTime = false;
    boolean detectTime = false;
    boolean turnBack = false;
    boolean forward1 = false;
    boolean forward2 = false;
    boolean forward2Done = false;
    boolean enable = false;
    boolean enabled = false;
    boolean markingDone = false;

    public GoldAlignAuto100Marking1353() {

    }


    @Override
    public void init() {


        left_drive = hardwareMap.get(DcMotor.class, "left_drive");
        right_drive = hardwareMap.get(DcMotor.class, "right_drive");
        intake_drive = hardwareMap.get(DcMotor.class, "intake_drive");
        top = hardwareMap.get(TouchSensor.class, "top");
        liftSense = hardwareMap.get(DigitalChannel.class, "linearLimit");
        liftSense.setMode(DigitalChannel.Mode.INPUT);
        linear_drive = hardwareMap.get(DcMotor.class, "linear_drive");
        telemetry.addData("Status", "NewCodeUpload");

        // Set up detector
        detector = new GoldAlignDetector(); // Create detector
        detector.init(hardwareMap.appContext, CameraViewDisplay.getInstance()); // Initialize it with the app context and camera
        detector.useDefaults(); // Set detector to use default settings

        // Optional tuning
        detector.alignSize = 30; // How wide (in pixels) is the range in which the gold object will be aligned. (Represented by green bars in the preview)
        detector.alignPosOffset = 0; // How far from center frame to offset this alignment zone.
        detector.downscale = 0.4; // How much to downscale the input frames

        detector.areaScoringMethod = DogeCV.AreaScoringMethod.MAX_AREA; // Can also be PERFECT_AREA
        //detector.perfectAreaScorer.perfectArea = 10000; // if using PERFECT_AREA scoring
        detector.maxAreaScorer.weight = 0.005; //

        detector.ratioScorer.weight = 5; //
        detector.ratioScorer.perfectRatio = 1.0; // Ratio adjustment

        detector.enable(); // Start the detector!
        left_drive.setPower(0);
        right_drive.setPower(0);
        sampled = false;
        landed = false;
        telemetry.addData("landed", "False");
        telemetry.update();


    }

    /*
     * Code to run REPEATEDLY when the driver hits INIT
     */
    @Override
    public void init_loop() {

    }


    /*
     * Code to run ONCE when the driver hits PLAY
     */
    @Override
    public void start() {

    }

    /*
     * Code to run REPEATEDLY when the driver hits PLAY
     */
    @Override
    public void loop() {
        if (letsGO) {
            detector.disable();
            letsGO = false;
        }
        if (liftSense.getState()) {
            telemetry.addData("Limit Switch", "Is Not Pressed");
            linear_drive.setPower(1);
            left_drive.setPower(0);
            right_drive.setPower(0);
            landed = false;
            detector.disable();
            telemetry.addData("landed", "False");
            telemetry.update();

        } else {
            telemetry.addData("Limit Switch", "Is Pressed");
            linear_drive.setPower(0);
            landed = true;
            backUptime = true;
            turnTime = true;
            telemetry.addData("landed", "True");
            telemetry.addData("using right code", "YES");
            telemetry.update();
        }

        if (backUptime == true && backUpdone == false) {
            right_drive.setPower(-0.3);
            left_drive.setPower(0.3);
            runtime.reset();
            backUpdone = true;
            backUptime = false;
            turnTime = true;
            //Reset runtime for timed movement
            while ((runtime.seconds() < 0.5)) {
                telemetry.addData("Path", "BackinUp", runtime.seconds());
                telemetry.update();
            }
        }


        if (turnTime && backUpdone && turnDone == false) {
            right_drive.setPower(-0.3);
            left_drive.setPower(-0.3);
            detectTime = true;
            telemetry.addData("Path", "Turning");
            while ((runtime.seconds() < 1.9)) {
                telemetry.addData("Path", "TurningRight", runtime.seconds());
                telemetry.update();
            }
            turnTime = false;
            turnDone = true;
            forward1 = true;
            enable = true;
        }
        if (enable) {
            detector.enable();
            enable = false;
            runtime.reset();
            left_drive.setPower(0);
            right_drive.setPower(0);
            while ((runtime.seconds() < 1.75)) {
                telemetry.addData("Path", "DetectorEnable");
            }
            enabled = true;
        }

        if (detectTime && enabled) {
            telemetry.addData("Path", "detecting");

            if (detector.getXPosition() > 320 && detector.isFound()) {
                goldPosition = 2;
                telemetry.addData("goldPosition", "2");
                turnDone = true;
                detected = true;
                detectTime = false;
                turnBack = true;
            }
            if (detector.getXPosition() < 319 && detector.isFound()) {
                goldPosition = 1;
                telemetry.addData("goldPosition", "1");
                turnDone = true;
                detected = true;
                detectTime = false;
                turnBack = true;

            }
            if (detector.isFound() == false) {
                goldPosition = 3;
                telemetry.addData("goldPosition", "3");
                turnDone = true;
                detected = true;
                detectTime = false;
                turnBack = true;


            }
        }
        /*if (detected && turnBack) {
            right_drive.setPower(0.3);
            left_drive.setPower(-0.3);
            telemetry.addData("Path", "Turning");
            while ((runtime.seconds() < 0.2)) {
                telemetry.addData("Path", "TurningRight", runtime.seconds());
                telemetry.update();
                turnBack = false;
            }



        }*/

        telemetry.update();
        if (enabled && landed == true && backUpdone && turnDone && detector.isFound() == false && sampled == false && detected) {
            left_drive.setPower(-0.4);
            right_drive.setPower(-0.4);
            telemetry.addData("Finding", "cube");
        }

        //If less that target range turn left
        if (detector.getXPosition() < 305 && detector.getXPosition() > 0 && (landed == true) && (backUpdone == true && turnDone == true && !sampled)) {
            //left_drive.setPower(0.4);
            right_drive.setPower(0.4);
        } else if (landed == false) {
            left_drive.setPower(0);
            right_drive.setPower(0);
        }
        // If more than target range turn right
        if (detector.getXPosition() > 335 && detector.getXPosition() < 639 && (landed == true) && (backUpdone == true) && detected && turnDone == true && !sampled) {
            right_drive.setPower(-0.4);
            left_drive.setPower(-0.4);

        } else if (landed == false) {
            right_drive.setPower(0);
            left_drive.setPower(0);
        }

        // If aligned move forward
        // Interesting thing to note detector.getAligned() seems not to be true/false but true/nothing
        if ((landed == true) && detector.getAligned() && (backUpdone == true) && turnDone == true && detected && sampled == false) {
            right_drive.setPower(forward);
            left_drive.setPower(-forward);
            runtime.reset();
            sampled = true;

            //Reset runtime for timed movement
            while ((runtime.seconds() < 2.8)) {
                telemetry.addData("Path", "Leg 1: %2.5f S Elapsed", runtime.seconds());
                telemetry.update();
                sampled = true;
                DONE = false;
                turnTime1 = true;
                turnDone2 = false;
            }


            // Timed movement is temporary replace after with encoder movement
        } else {
            right_drive.setPower(0);
            left_drive.setPower(0);
        }
        if (turnTime1 && !markingTime) {
            telemetry.addData("Path", "Marking");
            if (goldPosition == 1) {
                runtime.reset();
                telemetry.addData("Path", "Turning");
                while ((runtime.seconds() < 1.4)) {
                    telemetry.addData("Path", "TurningRight", runtime.seconds());
                    telemetry.update();

                    right_drive.setPower(-0.3);
                    left_drive.setPower(-0.3);
                    forward2 = true;
                }
            }
            if (goldPosition == 2 && !markingTime) {
                markingTime = true;
                runtime.reset();
            }
            if (goldPosition == 3 && !markingTime) {
                runtime.reset();
                telemetry.addData("Path", "Turning");
                while ((runtime.seconds() < 0.9)) {
                    telemetry.addData("Path", "TurningLeft", runtime.seconds());
                    telemetry.update();


                    right_drive.setPower(0.3);
                    left_drive.setPower(0.3);
                    forward2 = true;
                }
            }
            if (forward2 && !forward2Done) {
                right_drive.setPower(forward);
                left_drive.setPower(-forward);
                runtime.reset();


                //Reset runtime for timed movement
                while ((runtime.seconds() < 0.9)) {
                    telemetry.addData("Path", "Leg 1: %2.5f S Elapsed", runtime.seconds());
                    telemetry.update();

                    DONE = false;
                    forward2Done = true;
                    markingTime = true;

                }
            }

            if (markingTime) {
                runtime.reset();
                while (runtime.seconds() < 1) {
                    telemetry.addData("Path", "TeamMarking", runtime.seconds());
                    telemetry.update();
                    left_drive.setPower(0);
                    right_drive.setPower(0);
                    intake_drive.setPower(1);
                    markingTime = false;


                }
                markingDone = true;
            }
            if (markingDone && !markingTime){
                intake_drive.setPower(0);
                runtime.reset();
                while ((runtime.seconds() < 1)) {
                    telemetry.addData("Path", "DONEnable");
                    DONE = true;
                }


            }
            if (DONE) {
                intake_drive.setPower(0);
                requestOpModeStop();
                requestOpModeStop();
            }
            if (DONE) {
                intake_drive.setPower(0);
                requestOpModeStop();
                requestOpModeStop();
            }


            /*
             * Code to run ONCE after the driver hits STOP
             */


            if (goldPosition == 1) {
                telemetry.addData("goldPosition", "1");

            }
            if (goldPosition == 2) {
                telemetry.addData("goldPosition", "2");

            }
            if (goldPosition == 3) {
                telemetry.addData("goldPosition", "3");

            }
        }

    }
    @Override
    public void stop() {
        // Disable the detector
        detector.disable();
    }
}



