/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.disnodeteam.dogecv.CameraViewDisplay;
import com.disnodeteam.dogecv.DogeCV;
import com.disnodeteam.dogecv.detectors.roverrukus.GoldAlignDetector;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.util.ElapsedTime;


@TeleOp(name="GoldAlign Auto", group="DogeCV")

public class GoldAlignAuto extends OpMode {
    // Detector object
    private GoldAlignDetector detector;
    private DcMotor left_drive = null;
    private DcMotor right_drive = null;
    private ElapsedTime runtime = new ElapsedTime();
    private TouchSensor top = null;
    private DcMotor linear_drive = null;
    private DigitalChannel liftSense = null;
    double turn = 0.6;
    double forward = 0.5;
    boolean sampled = false;
    boolean landed = false;


    public GoldAlignAuto() {

    }

    public final void sleep(long milliseconds) {
        try {
            Thread.sleep(milliseconds);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }


    @Override
    public void init() {


        left_drive = hardwareMap.get(DcMotor.class, "left_drive");
        right_drive = hardwareMap.get(DcMotor.class, "right_drive");
        top = hardwareMap.get(TouchSensor.class, "top");
        liftSense = hardwareMap.get(DigitalChannel.class, "liftSense");
        liftSense.setMode(DigitalChannel.Mode.INPUT);
        linear_drive = hardwareMap.get(DcMotor.class,          "linear_drive");
        telemetry.addData("Status", "NewCodeUpload");

        // Set up detector
        detector = new GoldAlignDetector(); // Create detector
        detector.init(hardwareMap.appContext, CameraViewDisplay.getInstance()); // Initialize it with the app context and camera
        detector.useDefaults(); // Set detector to use default settings

        // Optional tuning
        detector.alignSize = 20; // How wide (in pixels) is the range in which the gold object will be aligned. (Represented by green bars in the preview)
        detector.alignPosOffset = 0; // How far from center frame to offset this alignment zone.
        detector.downscale = 0.4; // How much to downscale the input frames

        detector.areaScoringMethod = DogeCV.AreaScoringMethod.MAX_AREA; // Can also be PERFECT_AREA
        //detector.perfectAreaScorer.perfectArea = 10000; // if using PERFECT_AREA scoring
        detector.maxAreaScorer.weight = 0.005; //

        detector.ratioScorer.weight = 5; //
        detector.ratioScorer.perfectRatio = 1.0; // Ratio adjustment

        detector.enable(); // Start the detector!
        left_drive.setPower(0);
        right_drive.setPower(0);
        sampled = false;
        landed = false;
        telemetry.addData("landed", "False");
        telemetry.update();



    }

    /*
     * Code to run REPEATEDLY when the driver hits INIT
     */
    @Override
    public void init_loop() {

    }


    /*
     * Code to run ONCE when the driver hits PLAY
     */
    @Override
    public void start() {

    }

    /*
     * Code to run REPEATEDLY when the driver hits PLAY
     */
    @Override
    public void loop() {
        if (liftSense.getState()) {
            telemetry.addData("Limit Switch", "Is Not Pressed");
            linear_drive.setPower(0.3);
            left_drive.setPower(0);
            right_drive.setPower(0);
            landed = false;
            telemetry.addData("landed", "False");
            telemetry.update();

        } else {
            telemetry.addData("Limit Switch", "Is Pressed");
            linear_drive.setPower(0);
            landed = true;
            telemetry.addData("landed", "True");
            telemetry.update();
        }

        telemetry.addData("IsAligned", detector.getAligned()); // Is the bot aligned with the gold mineral?
        telemetry.addData("X Pos", detector.getXPosition()); // Gold X position.//
        // The XPosition less than 100 is a temporary measure fix by finding actual Xpos in testing


        //If less that target range turn right
        if (detector.getXPosition() > 291 & (landed = true)) {
            left_drive.setPower(-turn);
        } else {
            left_drive.setPower(0);

        }
        // If more than target range turn left
         if (detector.getXPosition() < 309 & (landed = true)) {
            right_drive.setPower(turn);

        } else {
            right_drive.setPower(0);
        }
        // If aligned move forward
        // Interesting thing to note detector.getAligned() seems not to be true/false but true/nothing
        if ((landed = true)  & detector.getAligned()) {
            right_drive.setPower(forward);
            left_drive.setPower(-forward);
            runtime.reset();

           //Reset runtime for timed movement
           while ((runtime.seconds() < 2.5)) {
            telemetry.addData("Path", "Leg 1: %2.5f S Elapsed", runtime.seconds());
                telemetry.update();
                if ((runtime.seconds() > 3.0)) {
                    sampled = true;
                    requestOpModeStop();
                    requestOpModeStop();
                }
                if (sampled = true){
                   requestOpModeStop();
                   requestOpModeStop();
               }


               }





            // Timed movement is temporary replace after with encoder movement
        } else {
            right_drive.setPower(0);
            left_drive.setPower(0);
        }


        }


        /*
         * Code to run ONCE after the driver hits STOP
         */

    @Override
    public void stop() {
        // Disable the detector
        detector.disable();

    }
}
